# nachos accepts either .tsv files, lhotse manifests, or pandas dataframe
# multivalued fields separate values with comma (,).
#
# .tsv files:
# -----------------
# Key    field1_name    field2_name    field3_name    ... 
# id     v1             v2,w2          v3             ...
#
# choices: tsv, lhotse, pandas
formats:
  - lhotse
  - tsv
  - pandas

format: tsv

# nachos uses a variety of splitters
# Choices: VNS, MinNodeCut, Disconnected, SpectralClustering, Random 
splitters:
  - VNS
  - MinNodeCut
  - Disconnected
  - SpectralClustering
  - Random

splitter: VNS

# nachos splitters will create a training set and a held-out set. If multiple
# factor-disjoint sets are desired the splitter can be run recursively. Some
# splitters, such as the SpectralClusteringSplitter, will split into k splits. 
num_splits: 2

# Factor types so that the loader knows how to interpret the fields
factor_types: [str, str, int] 
 
# The indices (0-indexed) of the fields, i.e., factors, that test set instances
# should not share with instances in the training set.
factor_idxs: [0, 1]

# Weights on the arcs connecting entries that are similar according to the
# the factor in factor_idxs.
factor_weights: [1.0, 1.0] 

# The indices (0-indexed) of the fields, i.e., factors, that should be matched
# in the training and teest sets according to a specified statistic.
constraint_idxs: [2]

# Weights on the contraints applied
constraint_weights: [1.0]

# nachos uses a number of similarity functions for splitting  
# Choices: set_intersection, boolean, cosine, gaussian 
similarity_functions_list:
  - set_intersection # multi-valued categorical fields
  - boolean # categorical fields
  - cosine # vector valued fields (supports multi-valued fields)
  - gaussian # real valued 
  - levenshtein # sequence of categorical values

# The chosen similarity functions 
similarity_functions:
  - set_intersection
  - set_intersection

# Similarity thresholds (for cosine, Gaussian, levenshtein)
cosine_thresh: 0.3
gaussian_thresh: 0.8
levenshtein_thresh: 0.8 

# nachos uses different contraints
constraints_list:
  - mean # minimize the difference in training and test set means
  - mean_tuple # make the means of the train and test sets (val1, val2)
  - kl # kl divergence between train and test

# The chosen constraint
constraints:
  - mean

mean_tuple: [0.5, 0.5]
kl_smooth: 1e-06 # Amount to smooth unseen values
kl_direction: forward # forward, reverse, symmetric

# Optimizer parameters
seed: 0
max_iter: 200

# VNS parameters
num_shake_neighborhoods: 4
num_search_neighborhoods: 16 
